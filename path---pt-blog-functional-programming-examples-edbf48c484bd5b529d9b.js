webpackJsonp([0xac275b0af03f],{1139:function(n,s){n.exports={data:{markdownRemark:{fileAbsolutePath:"/home/luanorlandi/git/angeloocana/src/pages/blog/functional-programming/examples.pt.md",html:'<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> log <span class="token operator">=</span> console<span class="token punctuation">.</span>log<span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">identity</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">mul</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">identityf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">addf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">applyf</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// log(applyf(mul)(5)(6));</span>\n\n<span class="token keyword">function</span> <span class="token function">curry_ab</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">applyf</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token operator">...</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// log(curry(add, 2)(3));</span>\n<span class="token comment">///////////////////////////////////////////////////////</span>\n\n<span class="token comment">///////////////////////////////////////////////////////</span>\n<span class="token comment">//</span>\n<span class="token comment">// Without writing any new functions,</span>\n<span class="token comment">// show three ways to create the inc function.</span>\n<span class="token comment">//</span>\n<span class="token comment">// inc(5) // 6</span>\n<span class="token comment">// inc(inc(5)) // 7</span>\n\n<span class="token keyword">var</span> inc_1 <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token function">inc_1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token function">inc_1</span><span class="token punctuation">(</span><span class="token function">inc_1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> inc_2 <span class="token operator">=</span> <span class="token function">applyf</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token function">inc_2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token function">inc_2</span><span class="token punctuation">(</span><span class="token function">inc_2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> inc_3 <span class="token operator">=</span> <span class="token function">addf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token function">inc_3</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token function">inc_3</span><span class="token punctuation">(</span><span class="token function">inc_3</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//</span>\n<span class="token comment">///////////////////////////////////////////////////////</span>\n\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'///////////////////////////////////////////////\\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// Write methodize, a function                 \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// that converts a binary function             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// to a method.                                \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// Number.prototype.add = methodize(add);      \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// (3).add(4) // 7                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'\\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">methodize</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nNumber<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token function">methodize</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'(3).add(4) ==> \'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'///////////////////////////////////////////////\\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'///////////////////////////////////////////////\\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// Write demethodize, a                        \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// function that converts a                    \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// method to a binary function.                \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// demethodize(Number.prototype.add)(5, 6)     \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// // 11                                       \\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">demethodize</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>that<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token function">demethodize</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>add<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'///////////////////////////////////////////////\\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'///////////////////////////////////////////////\\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// Write a function twice that                 \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// takes a binary function and                 \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// returns a unary function that               \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// passes its argument to the                  \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// binary function twice.                      \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// var double = twice(add);                    \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// double(11); // 22                           \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// var square = twice(mul);                    \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// square(11); // 121                          \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">twice</span><span class="token punctuation">(</span>binary<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">binary</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> double <span class="token operator">=</span> <span class="token function">twice</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 22       </span>\n\n<span class="token keyword">var</span> square <span class="token operator">=</span> <span class="token function">twice</span><span class="token punctuation">(</span>mul<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 121</span>\n\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'///////////////////////////////////////////////\\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'///////////////////////////////////////////////\\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// Write a function composeu                   \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// that takes two unary functions              \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// and returns a unary function                \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// that calls them both.                       \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// composeu(double, square)(3); // 36          \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">composeu</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token function">composeu</span><span class="token punctuation">(</span>double<span class="token punctuation">,</span> square<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'///////////////////////////////////////////////\\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'///////////////////////////////////////////////\\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// Write a function composeb                   \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// that takes two binary functions             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// and returns a function that                 \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// calls them both.                            \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// composeb(add, mul)(2, 3, 5);  //25          \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">composeb</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token function">composeb</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> mul<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//25</span>\n\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'///////////////////////////////////////////////\\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'///////////////////////////////////////////////\\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// Write a function that allows                \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// another function to only be                 \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// called once.                                \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// add_once = once(add);                       \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// add_once(3, 4); // 7                        \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// add_once(3, 4); // throw                    \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">once_test</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> called <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>called<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token string">\'Called more than once\'</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">once</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> f <span class="token operator">=</span> func<span class="token punctuation">;</span>\n        func <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nadd_once <span class="token operator">=</span> <span class="token function">once</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add_once</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span>\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token function">add_once</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'throw error\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'///////////////////////////////////////////////\\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'///////////////////////////////////////////////\\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// Write a factory function that               \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// returns two functions that                  \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// implements an up/down counter.              \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// counter = counterf(10);                     \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// counter.inc(); // 11                        \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// counter.dec(); // 10                        \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">counterf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        inc<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> n<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        dec<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            n <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> n<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token function">counterf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>\n<span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">dec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'///////////////////////////////////////////////\\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'///////////////////////////////////////////////\\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// Make a revocable function that takes        \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// a nice function, and returns a              \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// revoke function that denies access          \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// to the nice function, and an invoke         \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// function that can invoke the nice           \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// function until it is revoked.               \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// temp = revocable(alert);                    \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// temp.invoke(7); // alert: 7                 \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// temp.revoke();                              \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'// temp.invoke(8); // throw!                   \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">revocable</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> access <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        invoke<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        revoke<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            f <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token function">revocable</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>\ntemp<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// alert: 7</span>\ntemp<span class="token punctuation">.</span><span class="token function">revoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n    temp<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// throw!</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'throw error\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'///////////////////////////////////////////////\\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'///////////////////////////////////////////////\\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'//                                             \\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'//                                             \\n\'</span> <span class="token operator">+</span>\n    <span class="token string">\'///////////////////////////////////////////////\\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>',
excerpt:"",fields:{tagSlugs:[{tag:"Programação Funcional",link:"/pt/tags/programacao-funcional/"}],slug:"/pt/blog/functional-programming/examples/",readNextPosts:[{excerpt:"Exemplos Javascript Spread Operator",frontmatter:{title:"Js Exemplos Spred Operator",date:"2017-06-23"},fields:{slug:"/pt/blog/js/spred-operator/",langKey:"pt"}},{excerpt:"Instalar ZSH https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH Instalar oh-my-zsh Baixar Instalar Transformar zsh em terminal…",frontmatter:{title:"Instalar ZSH e oh-my-zsh",date:"2017-06-23"},fields:{slug:"/pt/blog/terminal/install-zsh/",langKey:"pt"}},{excerpt:"Vim é um editor de texto da velha guarda, ele é executado no console, é o mais rápido de todos.\nÉ a melhor opção para acessar servidores…",frontmatter:{title:"Vim ajuda com comandos",date:"2017-08-08"},fields:{slug:"/pt/blog/vim/vim-help-commands/",langKey:"pt"}}]},frontmatter:{youtubeId:null,title:"Exemplos Programação Funcional",tags:["Programação Funcional"],date:"2017-06-23",structuredData:{type:"TechArticle",author:"angeloocana",dependencies:"Javascript basics",proficiencyLevel:"Beginner",articleSection:"Functional Programming",pageEnd:"...",pageStart:"...",pagination:"...",about:{name:"Functional Programming",alternateName:"FP",description:"Functional Programming is a programming style or pattern which compose pure functions to build a software.",identifier:"functional-programming",image:"...",sameAs:"https://en.wikipedia.org/wiki/Functional_programming"},accessMode:"textual",accessModeSufficient:"textual",accessibilityAPI:"ARIA",accessibilityControl:"fullKeyboardControl, fullTouchControl, fullMouseControl",accessibilitySummary:"...",aggregateRating:"...",audience:"...",alternativeHeadline:"...",comment:"...",commentCount:"...",contentLocation:"...",dateCreated:"...",dateModified:"...",datePublished:"...",discussionUrl:"...",educationalUse:"...",isAccessibleForFree:!0,isFamilyFriendly:!0,keywords:"...",locationCreated:"Barueri BR",thumbnailUrl:"...",version:1,video:"..."}}}},pathContext:{path:"/pt/blog/functional-programming/examples/",langKey:"pt"}}}});
//# sourceMappingURL=path---pt-blog-functional-programming-examples-edbf48c484bd5b529d9b.js.map